<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">

<head>
    <!-- Basic Page Needs -->
    <meta charset="utf-8">
    <title>Transha Stayss - Admin Packages</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!-- Theme Style -->
    <link rel="stylesheet" type="text/css" href="admin-css/animate.min.css">
    <link rel="stylesheet" type="text/css" href="admin-css/animation.css">
    <link rel="stylesheet" type="text/css" href="admin-css/bootstrap.css">
    <link rel="stylesheet" type="text/css" href="admin-css/bootstrap-select.min.css">
    <link rel="stylesheet" type="text/css" href="admin-css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Font -->
    <link rel="stylesheet" href="admin-font/fonts.css">

    <!-- Icon -->
    <link rel="stylesheet" href="admin-icon/style.css">

    <!-- Favicon and Touch Icons  -->
    <link rel="shortcut icon" href="img/transha/logo.jpeg">
    <link rel="apple-touch-icon-precomposed" href="img/transha/logo.jpeg">
   <style>
     .main-content-inner {
            padding: 20px;
        }
        
        .wg-box {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            border: 1px solid #e9ecef;
        }
        
        .title-box {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .form-search {
            display: flex;
            gap: 10px;
        }
        
        .apt-card {
            transition: all 0.3s ease;
            border-radius: 10px;
            overflow: hidden;
            border: 1px solid #e9ecef;
        }
        
        .apt-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .badge-corners {
            border-radius: 7.5px 13px 7.5px 13px;
        }
        
        .btn-xs {
            font-size: 12px;
            padding: 4px 11px;
            line-height: 1.7;
            margin-right: 5px;
            border-radius: 9px;
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            display: none;
            overflow: auto;
            padding: 20px 0;
        }
        
        .modal-content {
            background: white;
            width: 95%;
            max-width: 800px;
            margin: 20px auto;
            border-radius: 14px;
            box-shadow: 0 16px 38px rgba(27, 50, 90, 0.19);
            position: relative;
        }
        
        .modal-header {
            padding: 15px 20px;
            border-bottom: 1px solid #e9ecef;
            background: linear-gradient(70deg, #349bfa 60%, #bcf1ff 140%);
            color: white;
            border-radius: 14px 14px 0 0;
        }
        
        .modal-body {
            padding: 20px;
            max-height: 70vh;
            overflow-y: auto;
        }
        
        .close-btn {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 24px;
            cursor: pointer;
            color: white;
            background: none;
            border: none;
        }
        
        .section-card {
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            background: #f8f9fa;
        }
        
        .apartment-section, .room-section {
            border-left: 4px solid var(--primary);
            padding-left: 15px;
            margin-bottom: 20px;
        }
        
        .apartment-section {
            background: #f0f7ff;
        }
        
        .room-section {
            background: #f9fbff;
            margin-left: 20px;
        }
        
        .hierarchy-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
            font-size: 14px;
            color: var(--secondary);
        }
        
        .hierarchy-indicator i {
            font-size: 12px;
        }
        
        .tab-container {
            display: flex;
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
        }
        
        .tab.active {
            border-bottom: 3px solid var(--primary);
            color: var(--primary);
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .image-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        
        .image-preview-item {
            position: relative;
            width: 80px;
            height: 80px;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .image-preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .image-preview-item .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
        }
        
        .dynamic-list {
            margin-bottom: 10px;
        }
        
        .dynamic-list-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .dynamic-list-item input {
            flex: 1;
            margin-right: 10px;
        }
        
        @media (max-width: 768px) {
            .modal-content {
                width: 98%;
                margin: 10px auto;
            }
            
            .form-search {
                flex-direction: column;
            }
            
            .tab-container {
                flex-wrap: wrap;
            }
            
            .tab {
                flex: 1;
                min-width: 120px;
                text-align: center;
            }
        }
   </style>
</head>

<body class="body">

    <!-- #wrapper -->
    <div id="wrapper">
        <!-- #page -->
        <div id="page" class="">
            <!-- layout-wrap -->
            <div class="layout-wrap loader-off">
                <!-- preload -->
                <div id="preload" class="preload-container">
                    <div class="preloading">
                        <span></span>
                    </div>
                </div>
                <!-- /preload -->
                <!-- section-menu-left -->
                <div class="section-menu-left">
                    <div class="box-logo">
                        <a href="/dashboard" id="site-logo-inner">
                            <img style="width:60px;" id="logo_header" alt="logo" src="img/transha/logo.png"
                                data-light="img/transha/logo.png" data-dark="img/transha/logo.png">
                        </a>
                        <div class="button-show-hide">
                            <i class="icon-chevron-left"></i>
                        </div>
                    </div>
                    <div class="section-menu-left-wrap">
                        <div class="center">
                            <div class="center-item">
                                <ul>
                                    <li class="menu-item">
                                        <a href="/dashboard">
                                            <div class="icon">
                                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                                                    xmlns="http://www.w3.org/2000/svg">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                        d="M12.2652 3.57566C12.1187 3.42921 11.8813 3.42921 11.7348 3.57566L5.25 10.0605V19.8748C5.25 20.0819 5.41789 20.2498 5.625 20.2498H9V16.1248C9 15.0893 9.83947 14.2498 10.875 14.2498H13.125C14.1605 14.2498 15 15.0893 15 16.1248V20.2498H18.375C18.5821 20.2498 18.75 20.0819 18.75 19.8748V10.0605L12.2652 3.57566ZM20.25 11.5605L21.2197 12.5302C21.5126 12.8231 21.9874 12.8231 22.2803 12.5302C22.5732 12.2373 22.5732 11.7624 22.2803 11.4695L13.3258 2.51499C12.5936 1.78276 11.4064 1.78276 10.6742 2.515L1.71967 11.4695C1.42678 11.7624 1.42678 12.2373 1.71967 12.5302C2.01256 12.8231 2.48744 12.8231 2.78033 12.5302L3.75 11.5605V19.8748C3.75 20.9104 4.58947 21.7498 5.625 21.7498H18.375C19.4105 21.7498 20.25 20.9104 20.25 19.8748V11.5605ZM13.5 20.2498H10.5V16.1248C10.5 15.9177 10.6679 15.7498 10.875 15.7498H13.125C13.3321 15.7498 13.5 15.9177 13.5 16.1248V20.2498Z"
                                                        fill="#111111" />
                                                </svg>
                                            </div>
                                            <div class="text">Admin Dashboard</div>
                                        </a>
                                    </li>
                                    <li class="menu-item active">
                                        <a href="/admin-resort" class="menu-item-button">
                                            <div class="icon"><i class="icon-file-plus"></i></div>
                                            <div class="text">Apartments Management</div>
                                        </a>

                                    </li>
                                    <li class="menu-item">
                                        <a href="/admin-pg" class="menu-item-button">
                                            <div class="icon"><i class="icon-layers"></i></div>
                                            <div class="text">pg Management</div>
                                        </a>

                                    </li>
                                    <li class="menu-item  ">
                                        <a href="/admin-booking" class="menu-item-button">
                                            <div class="icon"><i class="icon-layers"></i></div>
                                            <div class="text">Booking Management</div>
                                        </a>

                                    </li>
                                    <li class="menu-item  ">
                                        <a href="/admin-mainbanner" class="menu-item-button">
                                            <div class="icon"><i class="icon-layers"></i></div>
                                            <div class="text">Banner Management</div>
                                        </a>

                                    </li>

                                    <li class="menu-item">
                                        <a href="/admin-testimonials" class="menu-item-button">
                                            <div class="icon"><i class="fa fa-star-o"></i></div>
                                            <div class="text">Testimonials Management</div>
                                        </a>
                                    </li>

                                    <li class="menu-item">
                                        <a href="/admin-blogs" class="menu-item-button">
                                            <div class="icon"><i class="icon-book-open"></i></div>
                                            <div class="text">Blogs Management</div>
                                        </a>
                                    </li>
                                    <li class="menu-item">
                                        <a href="/logout">
                                            <div class="icon">
                                                <svg width="24" height="22" viewBox="0 0 20 20" fill="none"
                                                    xmlns="http://www.w3.org/2000/svg">
                                                    <path
                                                        d="M8.125 18.6875C8.125 18.903 8.0394 19.1097 7.88702 19.262C7.73465 19.4144 7.52799 19.5 7.3125 19.5H1.625C1.19402 19.5 0.780698 19.3288 0.475951 19.024C0.171205 18.7193 0 18.306 0 17.875V1.625C0 1.19402 0.171205 0.780698 0.475951 0.475951C0.780698 0.171205 1.19402 0 1.625 0H7.3125C7.52799 0 7.73465 0.0856026 7.88702 0.237976C8.0394 0.390349 8.125 0.597012 8.125 0.8125C8.125 1.02799 8.0394 1.23465 7.88702 1.38702C7.73465 1.5394 7.52799 1.625 7.3125 1.625H1.625V17.875H7.3125C7.52799 17.875 7.73465 17.9606 7.88702 18.113C8.0394 18.2653 8.125 18.472 8.125 18.6875ZM19.2623 9.17516L15.1998 5.11266C15.0474 4.9602 14.8406 4.87455 14.625 4.87455C14.4094 4.87455 14.2026 4.9602 14.0502 5.11266C13.8977 5.26511 13.812 5.47189 13.812 5.6875C13.812 5.90311 13.8977 6.10989 14.0502 6.26234L16.7263 8.9375H7.3125C7.09701 8.9375 6.89035 9.0231 6.73798 9.17548C6.5856 9.32785 6.5 9.53451 6.5 9.75C6.5 9.96549 6.5856 10.1722 6.73798 10.3245C6.89035 10.4769 7.09701 10.5625 7.3125 10.5625H16.7263L14.0502 13.2377C13.8977 13.3901 13.812 13.5969 13.812 13.8125C13.812 14.0281 13.8977 14.2349 14.0502 14.3873C14.2026 14.5398 14.4094 14.6255 14.625 14.6255C14.8406 14.6255 15.0474 14.5398 15.1998 14.3873L19.2623 10.3248C19.3379 10.2494 19.3978 10.1598 19.4387 10.0611C19.4796 9.9625 19.5006 9.85678 19.5006 9.75C19.5006 9.64322 19.4796 9.5375 19.4387 9.43886C19.3978 9.34023 19.3379 9.25062 19.2623 9.17516Z"
                                                        fill="#111111" />
                                                </svg>
                                            </div>
                                            <div class="text">Log out</div>
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /section-menu-left -->
                <!-- section-content-right -->
                <div class="section-content-right">
                    <!-- header-dashboard -->
                    <div class="header-dashboard">
                        <div class="wrap">
                            <div class="header-left">
                                <a href="/dashboard">
                                    <img style="width: 50px;" id="logo_header_mobile" alt="" src="img/transha/logo.png"
                                        data-light="img/transha/logo.png" data-dark="img/transha/logo.png">
                                </a>
                                <div class="button-show-hide">
                                    <i class="icon-chevron-left"></i>
                                </div>

                            </div>
                            <div class="header-grid">
                                <div class="header-item button-dark-light">
                                    <i class="icon-moon"></i>
                                </div>


                                <div class="header-item button-zoom-maximize">
                                    <div class="">
                                        <i class="icon-maximize"></i>
                                    </div>
                                </div>
                                <div class="popup-wrap user type-header">
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle" type="button"
                                            id="dropdownMenuButton3" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span class="header-user wg-user">
                                                <span class="image">
                                                    <img src="admin-images/avatar/user-1.png" alt="">
                                                </span>
                                                <span class="flex flex-column">
                                                    <span class="body-text text-main-dark">Transha Stayss</span>
                                                    <span class="text-tiny">Admin</span>
                                                </span>
                                            </span>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end has-content"
                                            aria-labelledby="dropdownMenuButton3">

                                            <li>
                                                <a href="#" class="user-item">
                                                    <div class="icon">
                                                        <i class="icon-headphones"></i>
                                                    </div>
                                                    <div class="body-title-2">Support</div>
                                                </a>
                                            </li>
                                            <li>
                                                <a href="/logout" class="user-item">
                                                    <div class="icon">
                                                        <i class="icon-log-out"></i>
                                                    </div>
                                                    <div class="body-title-2">Log out</div>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- /header-dashboard -->
                    <!-- main-content -->
                    <div class="main-content">
                        <!-- main-content-wrap -->
                        <div class="main-content-inner">
                            <div class="flex items-center flex-wrap justify-between gap20 mb-30">
                                <h3><i class="fas fa-home" style="color:#247eff"></i> Premium Apartments Management</h3>
                                <ul class="breadcrumbs flex items-center flex-wrap justify-start gap10">
                                    <li>
                                        <a href="/dashboard">
                                            <div class="text-tiny">Dashboard</div>
                                        </a>
                                    </li>
                                    <li>
                                        <i class="fas fa-chevron-right"></i>
                                    </li>
                                    <li>
                                        <div class="text-tiny">Premium Apartments</div>
                                    </li>
                                </ul>
                            </div>
                    
                            <div class="wg-box px-3 py-3 mb-4">
                                <div class="title-box">
                                    <i class="fas fa-layer-group" style="font-size:23px;color:#247eff;"></i>
                                    <div class="body-text">
                                        <b>Manage Properties, Apartments, and Rooms</b><br>
                                        <span class="text-muted" style="font-size:13px;">Full hierarchy support: Property → Apartments → Rooms. Add, edit, and manage all levels from this interface.</span>
                                    </div>
                                </div>
                                <div class="flex items-center justify-between gap10 flex-wrap mb-3">
                                    <div class="wg-filter flex-grow">
                                        <div class="form-search">
                                            <input type="text" id="apt-search-input"
                                                class="form-control"
                                                style="border-radius:18px;"
                                                placeholder="Search by property, apartment, room, location...">
                                            <button id="apt-search-btn" type="button" class="btn btn-primary" style="border-radius:18px;">
                                                <i class="fas fa-search"></i> Search
                                            </button>
                                        </div>
                                    </div>
                                    <button class="btn btn-primary" style="border-radius:18px;" id="apt-add-btn">
                                        <i class="fas fa-plus"></i>
                                        Add New Property
                                    </button>
                                </div>
                                <div id="premium-apts-card-wrap"></div>
                            </div>
                    
                            <!-- Create/Edit Modal -->
                            <div class="modal-overlay" id="apt-modal">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h4 id="apt-modal-title">Add/Edit Property</h4>
                                        <button class="close-btn">&times;</button>
                                    </div>
                                    <div class="modal-body">
                                        <form id="apt-form">
                                            <div class="tab-container">
                                                <div class="tab active" data-tab="property">Property Details</div>
                                                <div class="tab" data-tab="apartments">Apartments</div>
                                                <div class="tab" data-tab="rooms">Rooms</div>
                                                <div class="tab" data-tab="settings">Settings</div>
                                            </div>
                                            
                                            <!-- Property Tab -->
                                            <div class="tab-content active" id="property-tab">
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="form-propertyTitle" class="form-label">Property Title *</label>
                                                        <input type="text" class="form-control" id="form-propertyTitle" name="propertyTitle" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="form-propertyType" class="form-label">Property Type</label>
                                                        <select class="form-control" id="form-propertyType" name="propertyType">
                                                            <option value="Full Apartment">Full Apartment</option>
                                                            <option value="Room Based">Room Based</option>
                                                            <option value="Mixed" selected>Mixed</option>
                                                        </select>
                                                    </div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="form-description" class="form-label">Description</label>
                                                    <textarea class="form-control" id="form-description" name="description" rows="3"></textarea>
                                                </div>
                                                
                                                <div class="section-card">
                                                    <h5>Location</h5>
                                                    <div class="row">
                                                        <div class="col-md-6 mb-3">
                                                            <label for="form-address" class="form-label">Address *</label>
                                                            <input type="text" class="form-control" id="form-address" name="address" required>
                                                        </div>
                                                        <div class="col-md-6 mb-3">
                                                            <label for="form-city" class="form-label">City *</label>
                                                            <input type="text" class="form-control" id="form-city" name="city" required>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-state" class="form-label">State</label>
                                                            <input type="text" class="form-control" id="form-state" name="state">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-country" class="form-label">Country</label>
                                                            <input type="text" class="form-control" id="form-country" name="country" value="India">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-zipcode" class="form-label">Pin/Zip Code</label>
                                                            <input type="text" class="form-control" id="form-zipcode" name="zipcode">
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div class="section-card">
                                                    <h5>Property Details</h5>
                                                    <div class="row">
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-floors" class="form-label">Floors</label>
                                                            <input type="number" class="form-control" id="form-floors" name="floors" min="1">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-featured" class="form-label d-block">Featured Property</label>
                                                            <div class="form-check form-switch">
                                                                <input class="form-check-input" type="checkbox" id="form-featured" name="featured">
                                                                <label class="form-check-label" for="form-featured">Mark as featured</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div class="section-card">
                                                    <h5>Property Images</h5>
                                                    <label for="form-gallery" class="form-label">Gallery Images</label>
                                                    <input class="form-control mb-2" id="form-gallery" name="gallery" type="file" multiple accept="image/*">
                                                    <div class="image-preview" id="gallery-preview"></div>
                                                </div>
                                            </div>
                                            
                                            <!-- Apartments Tab -->
                                            <div class="tab-content" id="apartments-tab">
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <h5>Apartments</h5>
                                                    <button type="button" class="btn btn-sm btn-primary" id="add-apartment-btn">
                                                        <i class="fas fa-plus"></i> Add Apartment
                                                    </button>
                                                </div>
                                                <div id="apartments-list"></div>
                                            </div>
                                            
                                            <!-- Rooms Tab -->
                                            <div class="tab-content" id="rooms-tab">
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <h5>Rooms</h5>
                                                    <button type="button" class="btn btn-sm btn-primary" id="add-room-btn">
                                                        <i class="fas fa-plus"></i> Add Room
                                                    </button>
                                                </div>
                                                <div id="rooms-list"></div>
                                            </div>
                                            
                                            <!-- Settings Tab -->
                                            <div class="tab-content" id="settings-tab">
                                                <div class="section-card">
                                                    <h5>Booking Settings</h5>
                                                    <div class="row">
                                                        <div class="col-md-6 mb-3">
                                                            <label for="form-checkInTime" class="form-label">Check-in Time</label>
                                                            <input type="text" class="form-control" id="form-checkInTime" name="checkInTime" value="12:00 PM">
                                                        </div>
                                                        <div class="col-md-6 mb-3">
                                                            <label for="form-checkOutTime" class="form-label">Check-out Time</label>
                                                            <input type="text" class="form-control" id="form-checkOutTime" name="checkOutTime" value="11:00 AM">
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-6 mb-3">
                                                            <label for="form-minStayNights" class="form-label">Minimum Stay (Nights)</label>
                                                            <input type="number" class="form-control" id="form-minStayNights" name="minStayNights" min="1" value="1">
                                                        </div>
                                                        <div class="col-md-6 mb-3">
                                                            <label for="form-maxStayNights" class="form-label">Maximum Stay (Nights)</label>
                                                            <input type="number" class="form-control" id="form-maxStayNights" name="maxStayNights" min="1">
                                                        </div>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label for="form-cancellationPolicy" class="form-label">Cancellation Policy</label>
                                                        <textarea class="form-control" id="form-cancellationPolicy" name="cancellationPolicy">Free cancellation up to 24 hours before check-in</textarea>
                                                    </div>
                                                </div>
                                                
                                                <div class="section-card">
                                                    <h5>Taxes & Fees</h5>
                                                    <div class="row">
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-cleaningFee" class="form-label">Cleaning Fee (₹)</label>
                                                            <input type="number" class="form-control" id="form-cleaningFee" name="cleaningFee" min="0" value="0">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-serviceFee" class="form-label">Service Fee (₹)</label>
                                                            <input type="number" class="form-control" id="form-serviceFee" name="serviceFee" min="0" value="0">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-taxPercent" class="form-label">Tax Percentage (%)</label>
                                                            <input type="number" class="form-control" id="form-taxPercent" name="taxPercent" min="0" value="0">
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div class="section-card">
                                                    <h5>Host Information</h5>
                                                    <div class="row">
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-hostName" class="form-label">Host Name</label>
                                                            <input type="text" class="form-control" id="form-hostName" name="hostName">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-hostContact" class="form-label">Contact</label>
                                                            <input type="text" class="form-control" id="form-hostContact" name="hostContact">
                                                        </div>
                                                        <div class="col-md-4 mb-3">
                                                            <label for="form-hostEmail" class="form-label">Email</label>
                                                            <input type="email" class="form-control" id="form-hostEmail" name="hostEmail">
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div class="section-card">
                                                    <h5>Amenities, Highlights & Rules</h5>
                                                    <div class="mb-3">
                                                        <label class="form-label">Amenities</label>
                                                        <div id="amenities-list" class="dynamic-list"></div>
                                                        <button type="button" class="btn btn-sm btn-light" id="add-amenity-btn">
                                                            <i class="fas fa-plus"></i> Add Amenity
                                                        </button>
                                                    </div>
                                                    
                                                    <div class="mb-3">
                                                        <label class="form-label">Highlights</label>
                                                        <div id="highlights-list" class="dynamic-list"></div>
                                                        <button type="button" class="btn btn-sm btn-light" id="add-highlight-btn">
                                                            <i class="fas fa-plus"></i> Add Highlight
                                                        </button>
                                                    </div>
                                                    
                                                    <div class="mb-3">
                                                        <label class="form-label">Rules</label>
                                                        <div id="rules-list" class="dynamic-list"></div>
                                                        <button type="button" class="btn btn-sm btn-light" id="add-rule-btn">
                                                            <i class="fas fa-plus"></i> Add Rule
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="d-flex justify-content-end mt-4">
                                                <button type="button" class="btn btn-secondary me-2" onclick="closeModal()">Cancel</button>
                                                <button type="submit" class="btn btn-primary" id="apt-form-submit">Save Property</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                    
                            <!-- View Modal -->
                            <div class="modal-overlay" id="apt-view-modal">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h4>Property Details</h4>
                                        <button class="close-btn">&times;</button>
                                    </div>
                                    <div class="modal-body">
                                        <div id="apt-view-modal-body"></div>
                                    </div>
                                </div>
                            </div>
                    
                            <!-- Availability Modal -->
                            <div class="modal-overlay" id="apt-availability-modal">
                                <div class="modal-content" style="max-width: 500px;">
                                    <div class="modal-header">
                                        <h4>Update Availability</h4>
                                        <button class="close-btn">&times;</button>
                                    </div>
                                    <div class="modal-body">
                                        <div id="apt-availability-modal-body"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
                        <script>
                            // Global variables
                            let editingApartment = null;
                            let roomImagesCache = [];
                            let apartmentImagesCache = [];
                            let currentTab = 'property';
                    
                            // Toast notification function
                            function showToast(message, type = 'success') {
                                // Create toast element
                                const toast = document.createElement('div');
                                toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
                                toast.style.position = 'fixed';
                                toast.style.top = '30px';
                                toast.style.right = '30px';
                                toast.style.zIndex = '9999';
                                toast.style.minWidth = '250px';
                                toast.innerHTML = message;
                                
                                // Add to page
                                document.body.appendChild(toast);
                                
                                // Remove after delay
                                setTimeout(() => {
                                    toast.remove();
                                }, 3000);
                            }
                    
                            // Tab switching
                            function switchTab(tabName) {
                                // Update active tab
                                document.querySelectorAll('.tab').forEach(tab => {
                                    tab.classList.remove('active');
                                });
                                document.querySelector(`.tab[data-tab="${tabName}"]`).classList.add('active');
                                
                                // Update active content
                                document.querySelectorAll('.tab-content').forEach(content => {
                                    content.classList.remove('active');
                                });
                                document.getElementById(`${tabName}-tab`).classList.add('active');
                                
                                currentTab = tabName;
                            }
                    
                            // Initialize tabs
                            document.querySelectorAll('.tab').forEach(tab => {
                                tab.addEventListener('click', function() {
                                    switchTab(this.getAttribute('data-tab'));
                                });
                            });
                    
                            // Dynamic list functions
                            function addDynamicInput(listId, inputName, value = '') {
                                const list = document.getElementById(listId);
                                const item = document.createElement('div');
                                item.className = 'dynamic-list-item';
                                item.innerHTML = `
                                    <input type="text" class="form-control form-control-sm" name="${inputName}" value="${value}" placeholder="Enter ${inputName.replace('[]', '')}">
                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="this.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                `;
                                list.appendChild(item);
                            }
                    
                            function clearDynamicList(listId) {
                                document.getElementById(listId).innerHTML = '';
                            }
                    
                            // Initialize dynamic lists
                            document.getElementById('add-amenity-btn').addEventListener('click', () => {
                                addDynamicInput('amenities-list', 'amenities[]');
                            });
                    
                            document.getElementById('add-highlight-btn').addEventListener('click', () => {
                                addDynamicInput('highlights-list', 'highlights[]');
                            });
                    
                            document.getElementById('add-rule-btn').addEventListener('click', () => {
                                addDynamicInput('rules-list', 'rules[]');
                            });
                    
                            // Initialize with one empty field for each dynamic list
                            addDynamicInput('amenities-list', 'amenities[]');
                            addDynamicInput('highlights-list', 'highlights[]');
                            addDynamicInput('rules-list', 'rules[]');
                    
                            // Apartment management functions
                            function addApartmentUI(apartment = {}, index) {
                                const list = document.getElementById('apartments-list');
                                const apartmentId = index || Date.now();
                                
                                const apartmentDiv = document.createElement('div');
                                apartmentDiv.className = 'apartment-section';
                                apartmentDiv.setAttribute('data-id', apartmentId);
                                
                                apartmentDiv.innerHTML = `
                                    <div class="hierarchy-indicator">
                                        <i class="fas fa-building"></i>
                                        <span>Apartment</span>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Apartment Name *</label>
                                            <input type="text" class="form-control apartment-name" value="${apartment.apartmentName || ''}" placeholder="Enter apartment name" required>
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Total Rooms</label>
                                            <input type="number" class="form-control apartment-total-rooms" value="${apartment.totalRooms || ''}" min="1">
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Price Per Night (₹)</label>
                                            <input type="number" class="form-control apartment-price" value="${apartment.pricePerNight || ''}" min="0">
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Max Guests</label>
                                            <input type="number" class="form-control apartment-max-guests" value="${apartment.maxGuests || ''}" min="1">
                                        </div>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Description</label>
                                        <textarea class="form-control apartment-description" rows="2">${apartment.description || ''}</textarea>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Amenities</label>
                                        <input type="text" class="form-control apartment-amenities" value="${Array.isArray(apartment.amenities) ? apartment.amenities.join(', ') : ''}" placeholder="Comma separated amenities">
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Availability</label>
                                        <select class="form-control apartment-available">
                                            <option value="true" ${apartment.isAvailable !== false ? 'selected' : ''}>Available</option>
                                            <option value="false" ${apartment.isAvailable === false ? 'selected' : ''}>Not Available</option>
                                        </select>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Apartment Images</label>
                                        <input type="file" class="form-control apartment-images" multiple accept="image/*">
                                        <div class="image-preview apartment-images-preview" data-id="${apartmentId}"></div>
                                    </div>
                                    <div class="d-flex justify-content-end">
                                        <button type="button" class="btn btn-sm btn-danger" onclick="removeApartment(this)">
                                            <i class="fas fa-trash"></i> Remove Apartment
                                        </button>
                                    </div>
                                `;
                                
                                list.appendChild(apartmentDiv);
                                
                                // Initialize image preview if there are existing images
                                if (Array.isArray(apartment.images) && apartment.images.length > 0) {
                                    apartmentImagesCache[apartmentId] = apartment.images.map(src => ({ src }));
                                    refreshApartmentImagePreviews(apartmentId);
                                } else {
                                    apartmentImagesCache[apartmentId] = [];
                                }
                                
                                // Add event listener for image upload
                                const imageInput = apartmentDiv.querySelector('.apartment-images');
                                imageInput.addEventListener('change', function() {
                                    handleApartmentImageChange(this, apartmentId);
                                });
                            }
                    
                            function removeApartment(button) {
                                const apartmentDiv = button.closest('.apartment-section');
                                const apartmentId = apartmentDiv.getAttribute('data-id');
                                
                                // Remove from cache
                                delete apartmentImagesCache[apartmentId];
                                
                                // Remove from DOM
                                apartmentDiv.remove();
                            }
                    
                            function handleApartmentImageChange(input, apartmentId) {
                                if (!apartmentImagesCache[apartmentId]) {
                                    apartmentImagesCache[apartmentId] = [];
                                }
                                
                                const files = Array.from(input.files);
                                const limitedFiles = files.slice(0, 5); // Limit to 5 files
                                
                                // Clear previous selection
                                apartmentImagesCache[apartmentId] = [];
                                
                                if (limitedFiles.length === 0) {
                                    refreshApartmentImagePreviews(apartmentId);
                                    return;
                                }
                                
                                let filesRead = 0;
                                const newImages = [];
                                
                                limitedFiles.forEach((file, index) => {
                                    const reader = new FileReader();
                                    reader.onload = function(e) {
                                        newImages[index] = { src: e.target.result, name: file.name };
                                        filesRead++;
                                        
                                        if (filesRead === limitedFiles.length) {
                                            apartmentImagesCache[apartmentId] = newImages;
                                            refreshApartmentImagePreviews(apartmentId);
                                        }
                                    };
                                    reader.readAsDataURL(file);
                                });
                            }
                    
                            function refreshApartmentImagePreviews(apartmentId) {
                                const previewContainer = document.querySelector(`.apartment-images-preview[data-id="${apartmentId}"]`);
                                if (!previewContainer) return;
                                
                                previewContainer.innerHTML = '';
                                
                                if (Array.isArray(apartmentImagesCache[apartmentId])) {
                                    apartmentImagesCache[apartmentId].forEach((image, index) => {
                                        const previewItem = document.createElement('div');
                                        previewItem.className = 'image-preview-item';
                                        previewItem.innerHTML = `
                                            <img src="${image.src}" alt="Preview">
                                            <div class="remove-btn" onclick="removeApartmentImage('${apartmentId}', ${index})">
                                                <i class="fas fa-times"></i>
                                            </div>
                                        `;
                                        previewContainer.appendChild(previewItem);
                                    });
                                }
                            }
                    
                            function removeApartmentImage(apartmentId, index) {
                                if (!apartmentImagesCache[apartmentId]) return;
                                
                                apartmentImagesCache[apartmentId].splice(index, 1);
                                refreshApartmentImagePreviews(apartmentId);
                            }
                    
                            // Room management functions
                            function addRoomUI(room = {}, index) {
                                const list = document.getElementById('rooms-list');
                                const roomId = index || Date.now();
                                
                                const roomDiv = document.createElement('div');
                                roomDiv.className = 'room-section';
                                roomDiv.setAttribute('data-id', roomId);
                                
                                const roomTypes = ["Single", "Double", "Suite", "Deluxe"];
                                
                                roomDiv.innerHTML = `
                                    <div class="hierarchy-indicator">
                                        <i class="fas fa-door-closed"></i>
                                        <span>Room</span>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Room Name *</label>
                                            <input type="text" class="form-control room-name" value="${room.roomName || ''}" placeholder="Enter room name" required>
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Room Type</label>
                                            <select class="form-control room-type">
                                                <option value="">Select Type</option>
                                                ${roomTypes.map(type => 
                                                    `<option value="${type}" ${room.roomType === type ? 'selected' : ''}>${type}</option>`
                                                ).join('')}
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4 mb-2">
                                            <label class="form-label">Capacity</label>
                                            <input type="number" class="form-control room-capacity" value="${room.capacity || ''}" min="1">
                                        </div>
                                        <div class="col-md-4 mb-2">
                                            <label class="form-label">Bed Type</label>
                                            <input type="text" class="form-control room-bed-type" value="${room.bedType || ''}" placeholder="e.g. King, Twin">
                                        </div>
                                        <div class="col-md-4 mb-2">
                                            <label class="form-label">Price Per Night (₹)</label>
                                            <input type="number" class="form-control room-price" value="${room.pricePerNight || ''}" min="0">
                                        </div>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Amenities</label>
                                        <input type="text" class="form-control room-amenities" value="${Array.isArray(room.amenities) ? room.amenities.join(', ') : ''}" placeholder="Comma separated amenities">
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Description</label>
                                        <textarea class="form-control room-description" rows="2">${room.description || ''}</textarea>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Availability</label>
                                        <select class="form-control room-available">
                                            <option value="true" ${room.isAvailable !== false ? 'selected' : ''}>Available</option>
                                            <option value="false" ${room.isAvailable === false ? 'selected' : ''}>Not Available</option>
                                        </select>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Room Images</label>
                                        <input type="file" class="form-control room-images" multiple accept="image/*">
                                        <div class="image-preview room-images-preview" data-id="${roomId}"></div>
                                    </div>
                                    <div class="d-flex justify-content-end">
                                        <button type="button" class="btn btn-sm btn-danger" onclick="removeRoom(this)">
                                            <i class="fas fa-trash"></i> Remove Room
                                        </button>
                                    </div>
                                `;
                                
                                list.appendChild(roomDiv);
                                
                                // Initialize image preview if there are existing images
                                if (Array.isArray(room.images) && room.images.length > 0) {
                                    roomImagesCache[roomId] = room.images.map(src => ({ src }));
                                    refreshRoomImagePreviews(roomId);
                                } else {
                                    roomImagesCache[roomId] = [];
                                }
                                
                                // Add event listener for image upload
                                const imageInput = roomDiv.querySelector('.room-images');
                                imageInput.addEventListener('change', function() {
                                    handleRoomImageChange(this, roomId);
                                });
                            }
                    
                            function removeRoom(button) {
                                const roomDiv = button.closest('.room-section');
                                const roomId = roomDiv.getAttribute('data-id');
                                
                                // Remove from cache
                                delete roomImagesCache[roomId];
                                
                                // Remove from DOM
                                roomDiv.remove();
                            }
                    
                            function handleRoomImageChange(input, roomId) {
                                if (!roomImagesCache[roomId]) {
                                    roomImagesCache[roomId] = [];
                                }
                                
                                const files = Array.from(input.files);
                                const limitedFiles = files.slice(0, 5); // Limit to 5 files
                                
                                // Clear previous selection
                                roomImagesCache[roomId] = [];
                                
                                if (limitedFiles.length === 0) {
                                    refreshRoomImagePreviews(roomId);
                                    return;
                                }
                                
                                let filesRead = 0;
                                const newImages = [];
                                
                                limitedFiles.forEach((file, index) => {
                                    const reader = new FileReader();
                                    reader.onload = function(e) {
                                        newImages[index] = { src: e.target.result, name: file.name };
                                        filesRead++;
                                        
                                        if (filesRead === limitedFiles.length) {
                                            roomImagesCache[roomId] = newImages;
                                            refreshRoomImagePreviews(roomId);
                                        }
                                    };
                                    reader.readAsDataURL(file);
                                });
                            }
                    
                            function refreshRoomImagePreviews(roomId) {
                                const previewContainer = document.querySelector(`.room-images-preview[data-id="${roomId}"]`);
                                if (!previewContainer) return;
                                
                                previewContainer.innerHTML = '';
                                
                                if (Array.isArray(roomImagesCache[roomId])) {
                                    roomImagesCache[roomId].forEach((image, index) => {
                                        const previewItem = document.createElement('div');
                                        previewItem.className = 'image-preview-item';
                                        previewItem.innerHTML = `
                                            <img src="${image.src}" alt="Preview">
                                            <div class="remove-btn" onclick="removeRoomImage('${roomId}', ${index})">
                                                <i class="fas fa-times"></i>
                                            </div>
                                        `;
                                        previewContainer.appendChild(previewItem);
                                    });
                                }
                            }
                    
                            function removeRoomImage(roomId, index) {
                                if (!roomImagesCache[roomId]) return;
                                
                                roomImagesCache[roomId].splice(index, 1);
                                refreshRoomImagePreviews(roomId);
                            }
                    
                            // Initialize apartment and room buttons
                            document.getElementById('add-apartment-btn').addEventListener('click', () => {
                                addApartmentUI();
                            });
                    
                            document.getElementById('add-room-btn').addEventListener('click', () => {
                                addRoomUI();
                            });
                    
                            // Initialize with one apartment and one room
                            addApartmentUI();
                            addRoomUI();
                    
                            // Fetch and display apartments
                            async function fetchApartments(search = '') {
                                try {
                                    const url = '/apartments' + (search ? `?search=${encodeURIComponent(search)}` : '');
                                    const res = await fetch(url);
                                    const data = await res.json();
                                    
                                    if (data.success) {
                                        renderApartmentCards(data.apartments || data.results || []);
                                    } else {
                                        showToast(data.message || 'Error fetching apartments', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Network error', 'error');
                                }
                            }
                    
                            // Render apartment cards
                            function renderApartmentCards(apartments) {
                                const container = document.getElementById('premium-apts-card-wrap');
                                container.innerHTML = '';
                                
                                if (!apartments.length) {
                                    container.innerHTML = '<div class="text-center py-4">No apartments found</div>';
                                    return;
                                }
                                
                                apartments.forEach(apartment => {
                                    const card = document.createElement('div');
                                    card.className = 'apt-card card mb-4';
                                    
                                    // Prepare images for display
                                    let imagesHtml = '';
                                    if (Array.isArray(apartment.gallery) && apartment.gallery.length) {
                                        const previewImages = apartment.gallery.slice(0, 3);
                                        imagesHtml = previewImages.map(img => 
                                            `<img src="${img}" class="rounded me-1" style="width: 60px; height: 60px; object-fit: cover;">`
                                        ).join('');
                                        
                                        if (apartment.gallery.length > 3) {
                                            imagesHtml += `<span class="badge bg-secondary ms-1">+${apartment.gallery.length - 3}</span>`;
                                        }
                                    } else {
                                        imagesHtml = '<div class="text-muted">No images</div>';
                                    }
                                    
                                    // Prepare location text
                                    const locationParts = [];
                                    if (apartment.location) {
                                        if (apartment.location.address) locationParts.push(apartment.location.address);
                                        if (apartment.location.city) locationParts.push(apartment.location.city);
                                        if (apartment.location.state) locationParts.push(apartment.location.state);
                                        if (apartment.location.country) locationParts.push(apartment.location.country);
                                    }
                                    
                                    // Count apartments and rooms
                                    const apartmentCount = Array.isArray(apartment.apartments) ? apartment.apartments.length : 0;
                                    const roomCount = Array.isArray(apartment.rooms) ? apartment.rooms.length : 0;
                                    
                                    card.innerHTML = `
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h5 class="card-title">${apartment.propertyTitle || 'Untitled Property'}</h5>
                                                <span class="badge ${apartment.isActive ? 'bg-success' : 'bg-danger'}">
                                                    ${apartment.isActive ? 'Active' : 'Inactive'}
                                                </span>
                                            </div>
                                            
                                            <div class="mb-2">
                                                <span class="badge bg-primary me-1">${apartment.propertyType || 'Mixed'}</span>
                                                ${apartment.featured ? '<span class="badge bg-warning">Featured</span>' : ''}
                                            </div>
                                            
                                            <div class="mb-2">
                                                <small class="text-muted">
                                                    <i class="fas fa-map-marker-alt me-1"></i>
                                                    ${locationParts.join(', ') || 'No location specified'}
                                                </small>
                                            </div>
                                            
                                            <div class="mb-2">
                                                ${imagesHtml}
                                            </div>
                                            
                                            <div class="mb-2">
                                                <small>
                                                    <i class="fas fa-building me-1"></i> ${apartmentCount} Apartments • 
                                                    <i class="fas fa-door-closed me-1"></i> ${roomCount} Rooms •
                                                    <i class="fas fa-layer-group me-1"></i> ${apartment.floors || 1} Floors
                                                </small>
                                            </div>
                                            
                                            <div class="mt-3">
                                                <button class="btn btn-sm btn-primary" onclick="openEditModal('${apartment._id}')">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-info" onclick="viewApartment('${apartment._id}')">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                                <button class="btn btn-sm btn-warning" onclick="openAvailabilityModal('${apartment._id}')">
                                                    <i class="fas fa-calendar-alt"></i> Availability
                                                </button>
                                                <button class="btn btn-sm btn-danger" onclick="deleteApartment('${apartment._id}')">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    `;
                                    
                                    container.appendChild(card);
                                });
                            }
                    
                            // Modal functions
                            function openCreateModal() {
                                editingApartment = null;
                                document.getElementById('apt-modal-title').textContent = 'Add New Property';
                                document.getElementById('apt-form').reset();
                                document.getElementById('apt-modal').style.display = 'block';
                                document.getElementById('apt-form-submit').onclick = createApartment;
                                
                                // Clear dynamic lists and add one empty field each
                                clearDynamicList('amenities-list');
                                clearDynamicList('highlights-list');
                                clearDynamicList('rules-list');
                                addDynamicInput('amenities-list', 'amenities[]');
                                addDynamicInput('highlights-list', 'highlights[]');
                                addDynamicInput('rules-list', 'rules[]');
                                
                                // Clear apartments and rooms and add one each
                                document.getElementById('apartments-list').innerHTML = '';
                                document.getElementById('rooms-list').innerHTML = '';
                                addApartmentUI();
                                addRoomUI();
                                
                                // Reset image caches
                                roomImagesCache = [];
                                apartmentImagesCache = [];
                                
                                // Switch to property tab
                                switchTab('property');
                            }
                    
                            function openEditModal(id) {
                                editingApartment = id;
                                document.getElementById('apt-modal-title').textContent = 'Edit Property';
                                document.getElementById('apt-form').reset();
                                document.getElementById('apt-form-submit').onclick = updateApartment;
                                
                                // Clear dynamic lists
                                clearDynamicList('amenities-list');
                                clearDynamicList('highlights-list');
                                clearDynamicList('rules-list');
                                
                                // Clear apartments and rooms
                                document.getElementById('apartments-list').innerHTML = '';
                                document.getElementById('rooms-list').innerHTML = '';
                                
                                // Reset image caches
                                roomImagesCache = [];
                                apartmentImagesCache = [];
                                
                                // Fetch apartment data
                                fetch(`/apartments/${id}`)
                                    .then(res => res.json())
                                    .then(data => {
                                        if (data.success && data.apartment) {
                                            const apt = data.apartment;
                                            
                                            // Fill form fields
                                            document.getElementById('form-propertyTitle').value = apt.propertyTitle || '';
                                            document.getElementById('form-description').value = apt.description || '';
                                            document.getElementById('form-propertyType').value = apt.propertyType || 'Mixed';
                                            
                                            // Location
                                            if (apt.location) {
                                                document.getElementById('form-address').value = apt.location.address || '';
                                                document.getElementById('form-city').value = apt.location.city || '';
                                                document.getElementById('form-state').value = apt.location.state || '';
                                                document.getElementById('form-country').value = apt.location.country || '';
                                                document.getElementById('form-zipcode').value = apt.location.pincode || apt.location.zipcode || '';
                                            }
                                            
                                            document.getElementById('form-floors').value = apt.floors || '';
                                            document.getElementById('form-featured').checked = !!apt.featured;
                                            
                                            // Settings
                                            document.getElementById('form-checkInTime').value = apt.checkInTime || '12:00 PM';
                                            document.getElementById('form-checkOutTime').value = apt.checkOutTime || '11:00 AM';
                                            document.getElementById('form-minStayNights').value = apt.minStayNights || 1;
                                            document.getElementById('form-maxStayNights').value = apt.maxStayNights || '';
                                            document.getElementById('form-cancellationPolicy').value = apt.cancellationPolicy || '';
                                            
                                            // Taxes & Fees
                                            if (apt.taxesAndFees) {
                                                document.getElementById('form-cleaningFee').value = apt.taxesAndFees.cleaningFee || 0;
                                                document.getElementById('form-serviceFee').value = apt.taxesAndFees.serviceFee || 0;
                                                document.getElementById('form-taxPercent').value = apt.taxesAndFees.taxPercent || 0;
                                            }
                                            
                                            // Host
                                            if (apt.host) {
                                                document.getElementById('form-hostName').value = apt.host.name || '';
                                                document.getElementById('form-hostContact').value = apt.host.contact || '';
                                                document.getElementById('form-hostEmail').value = apt.host.email || '';
                                            }
                                            
                                            // Dynamic lists
                                            if (Array.isArray(apt.amenities)) {
                                                apt.amenities.forEach(amenity => {
                                                    addDynamicInput('amenities-list', 'amenities[]', amenity);
                                                });
                                            } else {
                                                addDynamicInput('amenities-list', 'amenities[]');
                                            }
                                            
                                            if (Array.isArray(apt.highlights)) {
                                                apt.highlights.forEach(highlight => {
                                                    addDynamicInput('highlights-list', 'highlights[]', highlight);
                                                });
                                            } else {
                                                addDynamicInput('highlights-list', 'highlights[]');
                                            }
                                            
                                            if (Array.isArray(apt.rules)) {
                                                apt.rules.forEach(rule => {
                                                    addDynamicInput('rules-list', 'rules[]', rule);
                                                });
                                            } else {
                                                addDynamicInput('rules-list', 'rules[]');
                                            }
                                            
                                            // Apartments
                                            if (Array.isArray(apt.apartments)) {
                                                apt.apartments.forEach((apartment, index) => {
                                                    addApartmentUI(apartment, index);
                                                });
                                            } else {
                                                addApartmentUI();
                                            }
                                            
                                            // Rooms
                                            if (Array.isArray(apt.rooms)) {
                                                apt.rooms.forEach((room, index) => {
                                                    addRoomUI(room, index);
                                                });
                                            } else {
                                                addRoomUI();
                                            }
                                            
                                            // Show modal
                                            document.getElementById('apt-modal').style.display = 'block';
                                            switchTab('property');
                                        } else {
                                            showToast('Error loading apartment data', 'error');
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        showToast('Error loading apartment data', 'error');
                                    });
                            }
                    
                            function closeModal() {
                                document.getElementById('apt-modal').style.display = 'none';
                            }
                    
                            function closeViewModal() {
                                document.getElementById('apt-view-modal').style.display = 'none';
                            }
                    
                            function closeAvailabilityModal() {
                                document.getElementById('apt-availability-modal').style.display = 'none';
                            }
                    
                            // Form submission handlers
                            async function createApartment(event) {
                                event.preventDefault();
                                
                                const submitBtn = document.getElementById('apt-form-submit');
                                const originalText = submitBtn.innerHTML;
                                submitBtn.disabled = true;
                                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Saving...';
                                
                                try {
                                    const formData = new FormData();
                                    const data = collectFormData();
                                    
                                    formData.append('data', JSON.stringify(data));
                                    
                                    // Append gallery images
                                    const galleryInput = document.getElementById('form-gallery');
                                    if (galleryInput.files.length > 0) {
                                        for (let i = 0; i < galleryInput.files.length; i++) {
                                            formData.append('gallery', galleryInput.files[i]);
                                        }
                                    }
                                    
                                    const response = await fetch('/apartments', {
                                        method: 'POST',
                                        body: formData
                                    });
                                    
                                    const result = await response.json();
                                    
                                    if (result.success) {
                                        showToast('Property created successfully');
                                        closeModal();
                                        fetchApartments();
                                    } else {
                                        showToast(result.message || 'Error creating property', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Error creating property', 'error');
                                } finally {
                                    submitBtn.disabled = false;
                                    submitBtn.innerHTML = originalText;
                                }
                            }
                    
                            async function updateApartment(event) {
                                event.preventDefault();
                                
                                const submitBtn = document.getElementById('apt-form-submit');
                                const originalText = submitBtn.innerHTML;
                                submitBtn.disabled = true;
                                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Saving...';
                                
                                try {
                                    const formData = new FormData();
                                    const data = collectFormData();
                                    
                                    formData.append('data', JSON.stringify(data));
                                    
                                    // Append gallery images
                                    const galleryInput = document.getElementById('form-gallery');
                                    if (galleryInput.files.length > 0) {
                                        for (let i = 0; i < galleryInput.files.length; i++) {
                                            formData.append('gallery', galleryInput.files[i]);
                                        }
                                    }
                                    
                                    const response = await fetch(`/apartments/${editingApartment}`, {
                                        method: 'PUT',
                                        body: formData
                                    });
                                    
                                    const result = await response.json();
                                    
                                    if (result.success) {
                                        showToast('Property updated successfully');
                                        closeModal();
                                        fetchApartments();
                                    } else {
                                        showToast(result.message || 'Error updating property', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Error updating property', 'error');
                                } finally {
                                    submitBtn.disabled = false;
                                    submitBtn.innerHTML = originalText;
                                }
                            }
                    
                            function collectFormData() {
                                const form = document.getElementById('apt-form');
                                const formData = new FormData(form);
                                
                                // Basic property info
                                const data = {
                                    propertyTitle: formData.get('propertyTitle'),
                                    propertyType: formData.get('propertyType'),
                                    description: formData.get('description'),
                                    floors: formData.get('floors') ? parseInt(formData.get('floors')) : undefined,
                                    featured: document.getElementById('form-featured').checked
                                };
                                
                                // Location
                                data.location = {
                                    address: formData.get('address'),
                                    city: formData.get('city'),
                                    state: formData.get('state'),
                                    country: formData.get('country'),
                                    pincode: formData.get('zipcode')
                                };
                                
                                // Booking settings
                                data.checkInTime = formData.get('checkInTime');
                                data.checkOutTime = formData.get('checkOutTime');
                                data.minStayNights = formData.get('minStayNights') ? parseInt(formData.get('minStayNights')) : undefined;
                                data.maxStayNights = formData.get('maxStayNights') ? parseInt(formData.get('maxStayNights')) : undefined;
                                data.cancellationPolicy = formData.get('cancellationPolicy');
                                
                                // Taxes & fees
                                data.taxesAndFees = {
                                    cleaningFee: formData.get('cleaningFee') ? parseFloat(formData.get('cleaningFee')) : 0,
                                    serviceFee: formData.get('serviceFee') ? parseFloat(formData.get('serviceFee')) : 0,
                                    taxPercent: formData.get('taxPercent') ? parseFloat(formData.get('taxPercent')) : 0
                                };
                                
                                // Host info
                                data.host = {
                                    name: formData.get('hostName'),
                                    contact: formData.get('hostContact'),
                                    email: formData.get('hostEmail')
                                };
                                
                                // Dynamic lists
                                data.amenities = Array.from(document.querySelectorAll('input[name="amenities[]"]'))
                                    .map(input => input.value.trim())
                                    .filter(value => value);
                                    
                                data.highlights = Array.from(document.querySelectorAll('input[name="highlights[]"]'))
                                    .map(input => input.value.trim())
                                    .filter(value => value);
                                    
                                data.rules = Array.from(document.querySelectorAll('input[name="rules[]"]'))
                                    .map(input => input.value.trim())
                                    .filter(value => value);
                                
                                // Apartments
                                data.apartments = [];
                                document.querySelectorAll('.apartment-section').forEach(apartmentDiv => {
                                    const apartmentId = apartmentDiv.getAttribute('data-id');
                                    const apartment = {
                                        apartmentName: apartmentDiv.querySelector('.apartment-name').value,
                                        totalRooms: apartmentDiv.querySelector('.apartment-total-rooms').value ? 
                                            parseInt(apartmentDiv.querySelector('.apartment-total-rooms').value) : undefined,
                                        pricePerNight: apartmentDiv.querySelector('.apartment-price').value ? 
                                            parseFloat(apartmentDiv.querySelector('.apartment-price').value) : undefined,
                                        maxGuests: apartmentDiv.querySelector('.apartment-max-guests').value ? 
                                            parseInt(apartmentDiv.querySelector('.apartment-max-guests').value) : undefined,
                                        description: apartmentDiv.querySelector('.apartment-description').value,
                                        amenities: apartmentDiv.querySelector('.apartment-amenities').value ?
                                            apartmentDiv.querySelector('.apartment-amenities').value.split(',').map(a => a.trim()).filter(a => a) : [],
                                        isAvailable: apartmentDiv.querySelector('.apartment-available').value === 'true',
                                        images: apartmentImagesCache[apartmentId] ? 
                                            apartmentImagesCache[apartmentId].map(img => img.src) : []
                                    };
                                    
                                    data.apartments.push(apartment);
                                });
                                
                                // Rooms
                                data.rooms = [];
                                document.querySelectorAll('.room-section').forEach(roomDiv => {
                                    const roomId = roomDiv.getAttribute('data-id');
                                    const room = {
                                        roomName: roomDiv.querySelector('.room-name').value,
                                        roomType: roomDiv.querySelector('.room-type').value,
                                        capacity: roomDiv.querySelector('.room-capacity').value ? 
                                            parseInt(roomDiv.querySelector('.room-capacity').value) : undefined,
                                        bedType: roomDiv.querySelector('.room-bed-type').value,
                                        pricePerNight: roomDiv.querySelector('.room-price').value ? 
                                            parseFloat(roomDiv.querySelector('.room-price').value) : undefined,
                                        amenities: roomDiv.querySelector('.room-amenities').value ?
                                            roomDiv.querySelector('.room-amenities').value.split(',').map(a => a.trim()).filter(a => a) : [],
                                        description: roomDiv.querySelector('.room-description').value,
                                        isAvailable: roomDiv.querySelector('.room-available').value === 'true',
                                        images: roomImagesCache[roomId] ? 
                                            roomImagesCache[roomId].map(img => img.src) : []
                                    };
                                    
                                    data.rooms.push(room);
                                });
                                
                                return data;
                            }
                    
                            // Other CRUD operations
                            async function deleteApartment(id) {
                                if (!confirm('Are you sure you want to delete this property?')) {
                                    return;
                                }
                                
                                try {
                                    const response = await fetch(`/apartments/${id}`, {
                                        method: 'DELETE'
                                    });
                                    
                                    const result = await response.json();
                                    
                                    if (result.success) {
                                        showToast('Property deleted successfully');
                                        fetchApartments();
                                    } else {
                                        showToast(result.message || 'Error deleting property', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Error deleting property', 'error');
                                }
                            }
                    
                            async function toggleStatus(id) {
                                try {
                                    const response = await fetch(`/apartments/${id}/toggle`, {
                                        method: 'PATCH'
                                    });
                                    
                                    const result = await response.json();
                                    
                                    if (result.success) {
                                        showToast('Status updated successfully');
                                        fetchApartments();
                                    } else {
                                        showToast(result.message || 'Error updating status', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Error updating status', 'error');
                                }
                            }
                    
                            function openAvailabilityModal(id) {
                                document.getElementById('apt-availability-modal-body').innerHTML = `
                                    <div class="mb-3">
                                        <label class="form-label">Select Type</label>
                                        <select class="form-control" id="availability-type">
                                            <option value="property">Entire Property</option>
                                            <option value="apartment">Specific Apartment</option>
                                            <option value="room">Specific Room</option>
                                        </select>
                                    </div>
                                    <div class="mb-3" id="availability-specific" style="display: none;">
                                        <label class="form-label" id="availability-specific-label">Select</label>
                                        <select class="form-control" id="availability-specific-select"></select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Availability</label>
                                        <select class="form-control" id="availability-value">
                                            <option value="true">Available</option>
                                            <option value="false">Not Available</option>
                                        </select>
                                    </div>
                                    <div class="d-flex justify-content-end">
                                        <button type="button" class="btn btn-secondary me-2" onclick="closeAvailabilityModal()">Cancel</button>
                                        <button type="button" class="btn btn-primary" onclick="submitAvailability('${id}')">Update</button>
                                    </div>
                                `;
                                
                                document.getElementById('apt-availability-modal').style.display = 'block';
                                
                                // Add event listener for type change
                                document.getElementById('availability-type').addEventListener('change', function() {
                                    const specificDiv = document.getElementById('availability-specific');
                                    const specificSelect = document.getElementById('availability-specific-select');
                                    
                                    if (this.value === 'property') {
                                        specificDiv.style.display = 'none';
                                    } else {
                                        specificDiv.style.display = 'block';
                                        
                                        if (this.value === 'apartment') {
                                            document.getElementById('availability-specific-label').textContent = 'Select Apartment';
                                            // In a real app, you would fetch the apartments for this property
                                            specificSelect.innerHTML = '<option value="apartment1">Apartment 1</option><option value="apartment2">Apartment 2</option>';
                                        } else if (this.value === 'room') {
                                            document.getElementById('availability-specific-label').textContent = 'Select Room';
                                            // In a real app, you would fetch the rooms for this property
                                            specificSelect.innerHTML = '<option value="room1">Room 1</option><option value="room2">Room 2</option>';
                                        }
                                    }
                                });
                            }
                    
                            async function submitAvailability(id) {
                                const type = document.getElementById('availability-type').value;
                                const available = document.getElementById('availability-value').value === 'true';
                                const specific = document.getElementById('availability-specific-select').value;
                                
                                let payload = { available };
                                
                                if (type === 'apartment') {
                                    payload.apartmentName = specific;
                                } else if (type === 'room') {
                                    payload.roomName = specific;
                                }
                                
                                try {
                                    const response = await fetch(`/apartments/${id}/availability`, {
                                        method: 'PATCH',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(payload)
                                    });
                                    
                                    const result = await response.json();
                                    
                                    if (result.success) {
                                        showToast('Availability updated successfully');
                                        closeAvailabilityModal();
                                        fetchApartments();
                                    } else {
                                        showToast(result.message || 'Error updating availability', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Error updating availability', 'error');
                                }
                            }
                    
                            async function viewApartment(id) {
                                try {
                                    const response = await fetch(`/apartments/${id}`);
                                    const result = await response.json();
                                    
                                    if (result.success && result.apartment) {
                                        const apartment = result.apartment;
                                        let html = `
                                            <h5>${apartment.propertyTitle || 'Untitled Property'}</h5>
                                            <p><strong>Type:</strong> ${apartment.propertyType || 'Mixed'}</p>
                                            <p><strong>Description:</strong> ${apartment.description || 'No description'}</p>
                                            
                                            <h6 class="mt-4">Location</h6>
                                            <p>
                                                ${apartment.location ? `
                                                    ${apartment.location.address || ''}<br>
                                                    ${apartment.location.city || ''}, ${apartment.location.state || ''}<br>
                                                    ${apartment.location.country || ''} ${apartment.location.pincode || ''}
                                                ` : 'No location specified'}
                                            </p>
                                        `;
                                        
                                        // Apartments
                                        if (Array.isArray(apartment.apartments) && apartment.apartments.length > 0) {
                                            html += `<h6 class="mt-4">Apartments (${apartment.apartments.length})</h6>`;
                                            apartment.apartments.forEach(apt => {
                                                html += `
                                                    <div class="border rounded p-2 mb-2">
                                                        <strong>${apt.apartmentName || 'Unnamed Apartment'}</strong><br>
                                                        <small>
                                                            Rooms: ${apt.totalRooms || 'N/A'} | 
                                                            Price: ₹${apt.pricePerNight || 'N/A'} | 
                                                            Max Guests: ${apt.maxGuests || 'N/A'} |
                                                            ${apt.isAvailable ? 'Available' : 'Not Available'}
                                                        </small>
                                                    </div>
                                                `;
                                            });
                                        }
                                        
                                        // Rooms
                                        if (Array.isArray(apartment.rooms) && apartment.rooms.length > 0) {
                                            html += `<h6 class="mt-4">Rooms (${apartment.rooms.length})</h6>`;
                                            apartment.rooms.forEach(room => {
                                                html += `
                                                    <div class="border rounded p-2 mb-2">
                                                        <strong>${room.roomName || 'Unnamed Room'}</strong> (${room.roomType || 'N/A'})<br>
                                                        <small>
                                                            Capacity: ${room.capacity || 'N/A'} | 
                                                            Bed: ${room.bedType || 'N/A'} | 
                                                            Price: ₹${room.pricePerNight || 'N/A'} |
                                                            ${room.isAvailable ? 'Available' : 'Not Available'}
                                                        </small>
                                                    </div>
                                                `;
                                            });
                                        }
                                        
                                        document.getElementById('apt-view-modal-body').innerHTML = html;
                                        document.getElementById('apt-view-modal').style.display = 'block';
                                    } else {
                                        showToast('Error loading property details', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast('Error loading property details', 'error');
                                }
                            }
                    
                            // Search functionality
                            function doApartmentSearch() {
                                const searchTerm = document.getElementById('apt-search-input').value.trim();
                                fetchApartments(searchTerm);
                            }
                    
                            // Event listeners
                            document.addEventListener('DOMContentLoaded', function() {
                                // Initial fetch
                                fetchApartments();
                                
                                // Search button
                                document.getElementById('apt-search-btn').addEventListener('click', doApartmentSearch);
                                
                                // Search input (enter key)
                                document.getElementById('apt-search-input').addEventListener('keyup', function(event) {
                                    if (event.key === 'Enter') {
                                        doApartmentSearch();
                                    }
                                });
                                
                                // Add button
                                document.getElementById('apt-add-btn').addEventListener('click', openCreateModal);
                                
                                // Close buttons
                                document.querySelectorAll('.close-btn').forEach(btn => {
                                    btn.addEventListener('click', function() {
                                        const modal = this.closest('.modal-overlay');
                                        if (modal) {
                                            modal.style.display = 'none';
                                        }
                                    });
                                });
                                
                                // Close modals when clicking outside
                                document.querySelectorAll('.modal-overlay').forEach(modal => {
                                    modal.addEventListener('click', function(event) {
                                        if (event.target === this) {
                                            this.style.display = 'none';
                                        }
                                    });
                                });
                            });
                        </script>
                        <!-- /main-content-wrap -->
                        <!-- bottom-page -->
                        <div class="bottom-page">
                            <div class="body-text">Copyright © 2025 <a href="">Transha Stayss</a>.
                                Design by Trivlogic Private Limited All rights reserved</div>
                        </div>
                        <!-- /bottom-page -->
                    </div>
                    <!-- /main-content -->
                </div>
                <!-- /section-content-right -->
            </div>
            <!-- /layout-wrap -->
        </div>
        <!-- /#page -->
    </div>
    <!-- /#wrapper -->

    <!-- <script>
        function updateLimit(select) {
            const limit = select.value;
            const url = new URL(window.location);
            url.searchParams.set('limit', limit);
            window.location.href = url.toString();
        }
    </script> -->
    <!-- Javascript -->
    <script src="admin-js/jquery.min.js"></script>
    <script src="admin-js/bootstrap.min.js"></script>
    <script src="admin-js/bootstrap-select.min.js"></script>
    <script src="admin-js/zoom.js"></script>
    <script src="admin-js/switcher.js"></script>
    <script defer src="admin-js/theme-settings.js"></script>
    <script defer src="admin-js/main.js"></script>

</body>

</html>